# Generated by Django 4.2 on 2024-02-29 11:01

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('teacher', models.BooleanField(default=False, verbose_name='Преподаватель')),
                ('student', models.BooleanField(default=True, verbose_name='Студент')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=15, unique=True, verbose_name='Название группы')),
                ('min_quantity', models.IntegerField(blank=True, null=True, verbose_name='min кол.')),
                ('max_quantity', models.IntegerField(blank=True, null=True, verbose_name='max кол.')),
            ],
            options={
                'verbose_name': 'Группа',
                'verbose_name_plural': 'Группы',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Название')),
                ('price', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Стоимость, руб')),
                ('start', models.DateTimeField(verbose_name='Дата и время начала')),
                ('min_quantity', models.IntegerField(default=2, verbose_name='min кол.')),
                ('max_quantity', models.IntegerField(default=10, verbose_name='max кол.')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author', to=settings.AUTH_USER_MODEL, to_field='username', verbose_name='Автор/Преподаватель')),
            ],
            options={
                'verbose_name': 'Продукт',
                'verbose_name_plural': 'Продукты',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='StudentsToProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='get_users', to='app_task.product')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product', to=settings.AUTH_USER_MODEL, to_field='username')),
            ],
            options={
                'verbose_name': 'Допущенные студенты',
                'verbose_name_plural': 'Допущенные студенты',
                'ordering': ['id', 'product', 'student'],
            },
        ),
        migrations.CreateModel(
            name='StudentsInGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='get_users', to='app_task.group', to_field='name')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='get_group', to=settings.AUTH_USER_MODEL, to_field='username')),
            ],
            options={
                'verbose_name': 'Состав группы',
                'verbose_name_plural': 'Состав группы',
                'ordering': ['id', 'group', 'student'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='students',
            field=models.ManyToManyField(related_name='get_prod', through='app_task.StudentsToProduct', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Название урока')),
                ('url_video', models.URLField(verbose_name='Ссылка на видео')),
                ('product_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson', to='app_task.product', verbose_name='Урок')),
            ],
            options={
                'verbose_name': 'Урок',
                'verbose_name_plural': 'Уроки',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='group',
            name='product_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group', to='app_task.product', verbose_name='Группа'),
        ),
        migrations.AddField(
            model_name='group',
            name='students',
            field=models.ManyToManyField(through='app_task.StudentsInGroup', to=settings.AUTH_USER_MODEL),
        ),
    ]
